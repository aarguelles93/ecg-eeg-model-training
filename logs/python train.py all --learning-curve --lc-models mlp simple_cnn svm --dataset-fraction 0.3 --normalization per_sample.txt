(tf-gpu-env) root@DESKTOP-08HJS8G:/mnt/d/Documents/Projects/Thesis/src# python train.py all --learning-curve --lc-models mlp simple_cnn svm --dataset-fraction 0.3 --normalization per_sample
🔧 Environment variables set for TensorFlow/CUDA compatibility
✅ Import safety check passed - TensorFlow not yet imported
2025-06-05 23:10:12.728306: I tensorflow/core/platform/cpu_feature_guard.cc:182] This TensorFlow binary is optimized to use available CPU instructions in performance-critical operations.
To enable the following instructions: AVX2 FMA, in other operations, rebuild TensorFlow with the appropriate compiler flags.
2025-06-05 23:10:21.599846: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:38] TF-TRT Warning: Could not find TensorRT
🔧 Setting up GPU configuration...
🚀 Setting up GPU-friendly configuration for GTX 1050 (2GB VRAM)...
✅ CUDA libdevice path set to: /usr/lib/cuda
🔧 Configuring GPU memory settings...
2025-06-05 23:10:43.347347: I tensorflow/compiler/xla/stream_executor/cuda/cuda_gpu_executor.cc:981] could not open file to read NUMA node: /sys/bus/pci/devices/0000:01:00.0/numa_node
Your kernel may have been built without NUMA support.
2025-06-05 23:10:44.322248: I tensorflow/compiler/xla/stream_executor/cuda/cuda_gpu_executor.cc:981] could not open file to read NUMA node: /sys/bus/pci/devices/0000:01:00.0/numa_node
Your kernel may have been built without NUMA support.
2025-06-05 23:10:44.322419: I tensorflow/compiler/xla/stream_executor/cuda/cuda_gpu_executor.cc:981] could not open file to read NUMA node: /sys/bus/pci/devices/0000:01:00.0/numa_node
Your kernel may have been built without NUMA support.
✅ Found 1 GPU(s): ['/physical_device:GPU:0']
✅ Memory growth enabled for /physical_device:GPU:0
🔧 Configuring TensorFlow memory management...
✅ Memory growth enabled for /physical_device:GPU:0
✅ Using float32 precision (optimized for GTX 1050/Pascal)
   This provides better performance than mixed precision on compute capability 6.1
✅ GPU configuration complete! GTX 1050 optimized with correct CUDA paths.
✅ GPU configuration successful - using optimized settings
🚀 ENHANCED TRAINING PIPELINE
======================================================================
🔧 Normalization: per_sample (strategy: separate)
📊 Dataset fraction: 30.0%
💾 Memory limit: 3.5GB
🎯 Validation strategy: auto
📊 Memory monitoring: Enabled
📈 Progress bars: Enabled
🖥️  GPU optimization: Enabled

📊 Initial system status:
💾 Initial memory usage: 0.44GB

📦 Preparing dataset with smart normalization...
🧠 Memory limit applied: 3.5GB
   📊 Calculated chunk size: 5,000 samples
   📊 Estimated memory per chunk: 0.11GB
🔍 Checking cached dataset: data/preprocessed_dataset.npz
✅ Cache parameters match - loading cached data
📊 Cached data loaded:
   Train: (25804, 6016) | Test: (6452, 6016)
   Range: [-4.826004, 5.000000]
✅ Dataset ready!
   📊 Dataset loaded in 16.6s
   🚀 Train: (25804, 6016), Test: (6452, 6016)
   📉 Using 30.0% of full dataset
   📈 Total features: 6,016
   🧠 EEG structure: 32 channels × 188 timepoints
   💾 Memory usage: 1.89GB (Δ+1.45GB)
   🔢 Data range: [-4.826, 5.000]
   📊 Data stats: mean=-0.002264, std=0.987077
   ✅ No extreme outliers detected - normalization looks good!

🎯 LEARNING CURVE ANALYSIS REQUESTED
============================================================
📊 Analyzing models: mlp, simple_cnn, svm
📈 Sample fractions: [0.05, 0.1, 0.2, 0.3, 0.5, 0.7, 1.0]
🔄 CV folds: 3
🚀 LEARNING CURVE ANALYSIS STARTING
============================================================
📊 Dataset size: 25,804 training samples
🔍 Models to analyze: mlp, simple_cnn, svm
📈 Sample fractions: [0.05, 0.1, 0.2, 0.3, 0.5, 0.7, 1.0]
🔄 Cross-validation folds: 3

🔍 Analyzing learning curve for MLP
============================================================

📊 Training on 5.0% of data...
   💾 Memory before: 1.91GB
2025-06-05 23:11:06.303649: I tensorflow/compiler/xla/stream_executor/cuda/cuda_gpu_executor.cc:981] could not open file to read NUMA node: /sys/bus/pci/devices/0000:01:00.0/numa_node
Your kernel may have been built without NUMA support.
2025-06-05 23:11:06.303787: I tensorflow/compiler/xla/stream_executor/cuda/cuda_gpu_executor.cc:981] could not open file to read NUMA node: /sys/bus/pci/devices/0000:01:00.0/numa_node
Your kernel may have been built without NUMA support.
2025-06-05 23:11:06.303867: I tensorflow/compiler/xla/stream_executor/cuda/cuda_gpu_executor.cc:981] could not open file to read NUMA node: /sys/bus/pci/devices/0000:01:00.0/numa_node
Your kernel may have been built without NUMA support.
2025-06-05 23:11:08.569331: I tensorflow/compiler/xla/stream_executor/cuda/cuda_gpu_executor.cc:981] could not open file to read NUMA node: /sys/bus/pci/devices/0000:01:00.0/numa_node
Your kernel may have been built without NUMA support.
2025-06-05 23:11:08.569513: I tensorflow/compiler/xla/stream_executor/cuda/cuda_gpu_executor.cc:981] could not open file to read NUMA node: /sys/bus/pci/devices/0000:01:00.0/numa_node
Your kernel may have been built without NUMA support.
2025-06-05 23:11:08.569552: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1726] Could not identify NUMA node of platform GPU id 0, defaulting to 0.  Your kernel may not have been built with NUMA support.
2025-06-05 23:11:08.569667: I tensorflow/compiler/xla/stream_executor/cuda/cuda_gpu_executor.cc:981] could not open file to read NUMA node: /sys/bus/pci/devices/0000:01:00.0/numa_node
Your kernel may have been built without NUMA support.
2025-06-05 23:11:08.569718: I tensorflow/core/common_runtime/gpu/gpu_process_state.cc:227] Using CUDA malloc Async allocator for GPU: 0
2025-06-05 23:11:08.650192: I tensorflow/core/common_runtime/gpu/gpu_device.cc:1639] Created device /job:localhost/replica:0/task:0/device:GPU:0 with 1875 MB memory:  -> device: 0, name: NVIDIA GeForce GTX 1050, pci bus id: 0000:01:00.0, compute capability: 6.1
🔧 Creating adam optimizer with lr=0.0001
   Fold 1: Train=0.993, Val=1.000, Time=18.7s
🧹 Cleaning up TensorFlow memory...
✅ Memory cleanup completed
🔧 Creating adam optimizer with lr=0.0001
   Fold 2: Train=0.994, Val=1.000, Time=14.0s
🧹 Cleaning up TensorFlow memory...
✅ Memory cleanup completed
🔧 Creating adam optimizer with lr=0.0001
   Fold 3: Train=0.991, Val=1.000, Time=13.1s
🧹 Cleaning up TensorFlow memory...
✅ Memory cleanup completed
   💾 Memory after: 4.15GB (Δ+2.25GB)
   📈 Average: Train=0.993±0.001, Val=1.000±0.000
🧹 Cleaning up TensorFlow memory...
✅ Memory cleanup completed

📊 Training on 10.0% of data...
   💾 Memory before: 4.15GB
🔧 Creating adam optimizer with lr=0.0001
   Fold 1: Train=0.999, Val=0.999, Time=9.7s
🧹 Cleaning up TensorFlow memory...
✅ Memory cleanup completed
🔧 Creating adam optimizer with lr=0.0001
   Fold 2: Train=0.999, Val=0.999, Time=9.0s
🧹 Cleaning up TensorFlow memory...
✅ Memory cleanup completed
🔧 Creating adam optimizer with lr=0.0001
   Fold 3: Train=0.999, Val=0.999, Time=16.1s
🧹 Cleaning up TensorFlow memory...
✅ Memory cleanup completed
   💾 Memory after: 4.16GB (Δ+0.01GB)
   📈 Average: Train=0.999±0.000, Val=0.999±0.000
🧹 Cleaning up TensorFlow memory...
✅ Memory cleanup completed

📊 Training on 20.0% of data...
   💾 Memory before: 4.16GB
🔧 Creating adam optimizer with lr=0.0001
   Fold 1: Train=0.999, Val=1.000, Time=12.9s
🧹 Cleaning up TensorFlow memory...
✅ Memory cleanup completed
🔧 Creating adam optimizer with lr=0.0001
   Fold 2: Train=0.999, Val=1.000, Time=12.6s
🧹 Cleaning up TensorFlow memory...
✅ Memory cleanup completed
🔧 Creating adam optimizer with lr=0.0001
   Fold 3: Train=0.999, Val=1.000, Time=10.7s
🧹 Cleaning up TensorFlow memory...
✅ Memory cleanup completed
   💾 Memory after: 4.17GB (Δ+0.01GB)
   📈 Average: Train=0.999±0.000, Val=1.000±0.000
   🛑 Early stopping: Improvement 0.0003 < threshold 0.005
   🎯 Optimal dataset size found at 20.0%
🧹 Cleaning up TensorFlow memory...
✅ Memory cleanup completed
🧹 Memory cleaned up after mlp
🧹 Cleaning up TensorFlow memory...
✅ Memory cleanup completed

🔍 Analyzing learning curve for SIMPLE_CNN
============================================================

📊 Training on 5.0% of data...
   💾 Memory before: 3.01GB
🔧 Creating adam optimizer with lr=0.0001
2025-06-05 23:13:15.956974: I tensorflow/compiler/xla/stream_executor/cuda/cuda_dnn.cc:432] Loaded cuDNN version 8907
   Fold 1: Train=1.000, Val=0.999, Time=45.8s
🧹 Cleaning up TensorFlow memory...
✅ Memory cleanup completed
🔧 Creating adam optimizer with lr=0.0001
   Fold 2: Train=1.000, Val=0.999, Time=48.0s
🧹 Cleaning up TensorFlow memory...
✅ Memory cleanup completed
🔧 Creating adam optimizer with lr=0.0001
   Fold 3: Train=1.000, Val=1.000, Time=26.2s
🧹 Cleaning up TensorFlow memory...
✅ Memory cleanup completed
   💾 Memory after: 4.32GB (Δ+1.30GB)
   📈 Average: Train=1.000±0.000, Val=0.999±0.000
🧹 Cleaning up TensorFlow memory...
✅ Memory cleanup completed

📊 Training on 10.0% of data...
   💾 Memory before: 4.32GB
🔧 Creating adam optimizer with lr=0.0001
   Fold 1: Train=1.000, Val=1.000, Time=29.9s
🧹 Cleaning up TensorFlow memory...
✅ Memory cleanup completed
🔧 Creating adam optimizer with lr=0.0001
   Fold 2: Train=1.000, Val=1.000, Time=55.6s
🧹 Cleaning up TensorFlow memory...
✅ Memory cleanup completed
🔧 Creating adam optimizer with lr=0.0001
   Fold 3: Train=1.000, Val=1.000, Time=42.6s
🧹 Cleaning up TensorFlow memory...
✅ Memory cleanup completed
   💾 Memory after: 4.33GB (Δ+0.01GB)
   📈 Average: Train=1.000±0.000, Val=1.000±0.000
🧹 Cleaning up TensorFlow memory...
✅ Memory cleanup completed

📊 Training on 20.0% of data...
   💾 Memory before: 4.33GB
🔧 Creating adam optimizer with lr=0.0001
   Fold 1: Train=1.000, Val=1.000, Time=63.5s
🧹 Cleaning up TensorFlow memory...
✅ Memory cleanup completed
🔧 Creating adam optimizer with lr=0.0001
   Fold 2: Train=0.999, Val=1.000, Time=73.4s
🧹 Cleaning up TensorFlow memory...
✅ Memory cleanup completed
🔧 Creating adam optimizer with lr=0.0001
   Fold 3: Train=1.000, Val=1.000, Time=38.8s
🧹 Cleaning up TensorFlow memory...
✅ Memory cleanup completed
   💾 Memory after: 4.33GB (Δ+0.00GB)
   📈 Average: Train=1.000±0.000, Val=1.000±0.000
   🛑 Early stopping: Improvement 0.0006 < threshold 0.005
   🎯 Optimal dataset size found at 20.0%
🧹 Cleaning up TensorFlow memory...
✅ Memory cleanup completed
🧹 Memory cleaned up after simple_cnn
🧹 Cleaning up TensorFlow memory...
✅ Memory cleanup completed

🔍 Analyzing learning curve for SVM
============================================================

📊 Training on 5.0% of data...
   💾 Memory before: 3.18GB
   Fold 1: Train=1.000, Val=1.000, Time=5.8s
🧹 Cleaning up TensorFlow memory...
✅ Memory cleanup completed
   Fold 2: Train=1.000, Val=1.000, Time=5.8s
🧹 Cleaning up TensorFlow memory...
✅ Memory cleanup completed
   Fold 3: Train=1.000, Val=1.000, Time=4.8s
🧹 Cleaning up TensorFlow memory...
✅ Memory cleanup completed
   💾 Memory after: 4.33GB (Δ+1.16GB)
   📈 Average: Train=1.000±0.000, Val=1.000±0.000
🧹 Cleaning up TensorFlow memory...
✅ Memory cleanup completed

📊 Training on 10.0% of data...
   💾 Memory before: 4.33GB
   Fold 1: Train=1.000, Val=1.000, Time=8.4s
🧹 Cleaning up TensorFlow memory...
✅ Memory cleanup completed
   Fold 2: Train=1.000, Val=1.000, Time=7.1s
🧹 Cleaning up TensorFlow memory...
✅ Memory cleanup completed
   Fold 3: Train=1.000, Val=1.000, Time=6.3s
🧹 Cleaning up TensorFlow memory...
✅ Memory cleanup completed
   💾 Memory after: 4.33GB (Δ+0.00GB)
   📈 Average: Train=1.000±0.000, Val=1.000±0.000
🧹 Cleaning up TensorFlow memory...
✅ Memory cleanup completed

📊 Training on 20.0% of data...
   💾 Memory before: 4.33GB
   Fold 1: Train=1.000, Val=1.000, Time=13.4s
🧹 Cleaning up TensorFlow memory...
✅ Memory cleanup completed
   Fold 2: Train=1.000, Val=1.000, Time=12.3s
🧹 Cleaning up TensorFlow memory...
✅ Memory cleanup completed
   Fold 3: Train=1.000, Val=1.000, Time=12.1s
🧹 Cleaning up TensorFlow memory...
✅ Memory cleanup completed
   💾 Memory after: 4.33GB (Δ+0.00GB)
   📈 Average: Train=1.000±0.000, Val=1.000±0.000
   🛑 Early stopping: Improvement 0.0003 < threshold 0.005
   🎯 Optimal dataset size found at 20.0%
🧹 Cleaning up TensorFlow memory...
✅ Memory cleanup completed
🧹 Memory cleaned up after svm
🧹 Cleaning up TensorFlow memory...
✅ Memory cleanup completed
📊 Learning curves saved to: learning_curves/learning_curves_20250605_232206.png

🎯 LEARNING CURVE ANALYSIS RECOMMENDATIONS
============================================================

🔍 MLP Analysis:
   🎯 Optimal dataset size: 5,160 samples (20.0%) - Accuracy: 1.000
   ⚡ Efficient dataset size: 2,580 samples (10.0%) - Time: 11.6s
   🎭 Overfitting level: Low (gap: -0.001)
   💡 Recommendation: ✅ EXCELLENT! Model performs well with only 20.0% of data

🔍 SIMPLE_CNN Analysis:
   🎯 Optimal dataset size: 2,580 samples (10.0%) - Accuracy: 1.000
   ⚡ Efficient dataset size: 1,290 samples (5.0%) - Time: 40.0s
   🎭 Overfitting level: Low (gap: -0.000)
   💡 Recommendation: ✅ EXCELLENT! Model performs well with only 10.0% of data

🔍 SVM Analysis:
   🎯 Optimal dataset size: 5,160 samples (20.0%) - Accuracy: 1.000
   ⚡ Efficient dataset size: 1,290 samples (5.0%) - Time: 5.5s
   🎭 Overfitting level: Low (gap: 0.000)
   💡 Recommendation: ✅ EXCELLENT! Model performs well with only 20.0% of data

🏆 OVERALL RECOMMENDATIONS:
   🥇 Top performing models:
      1. svm: 1.000 accuracy with 5,160 samples
      2. simple_cnn: 1.000 accuracy with 2,580 samples
      3. mlp: 1.000 accuracy with 5,160 samples
   ⚡ Most efficient model: simple_cnn - Good performance with only 1,290 samples
💾 Detailed results saved to: learning_curves/learning_curve_results_20250605_232210.json
📊 Summary CSV saved to: learning_curves/learning_curve_summary_20250605_232210.csv
💡 Recommendations saved to: learning_curves/recommendations_20250605_232210.json
🧹 Cleaning up memory after learning curve analysis...
🧹 Cleaning up TensorFlow memory...
✅ Memory cleanup completed

💡 LEARNING CURVE INSIGHTS:
   🚀 mlp: Can achieve 1.000 accuracy
      with only 2,580 samples (10.0%)
      Potential time savings: ~90.0%
   🚀 simple_cnn: Can achieve 1.000 accuracy
      with only 1,290 samples (5.0%)
      Potential time savings: ~95.0%
   🚀 svm: Can achieve 1.000 accuracy
      with only 1,290 samples (5.0%)
      Potential time savings: ~95.0%